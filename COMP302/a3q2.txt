datatype transactions =
	Withdraw of int | Deposit of int | Check_balance

exception wrongPassword	
exception overDrawn of int

fun make_protected_account(opening_balance: int, password: string) =
	let
		val balance = ref opening_balance
		val passwd = password
	in
		let
			val acc =
				fn (pass, Withdraw(x)) => 
					if(pass = passwd) then
						if(x<(!balance)) then
							(balance := !balance - x;
							print("The new balance is "^Int.toString(!balance)))
						else raise overDrawn (!balance)
					else raise wrongPassword
				| (pass, Deposit(x)) =>  
					if(pass = passwd) then
						(balance := !balance + x; 
						print("The new balance is "^Int.toString(!balance)))
					else raise wrongPassword
				| (pass, Check_balance) => 
					if(pass = passwd) then
						print("The balance is "^Int.toString(!balance))
					else raise wrongPassword
		in
			fn (pw:string, t: transactions) =>
			(acc(pw,t)
			handle wrongPassword => print("wrong Password.\n")
			| (overDrawn n) =>
				print("Insufficient funds for this transaction. The balance is"^Int.toString(n)^"\n"))
		end
	end